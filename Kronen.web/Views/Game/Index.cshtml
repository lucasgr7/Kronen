@using Kronen
@using Kronen.Models

@model VMGame
todo: Remover barra no topo e fixar no canto esquerdo para sair <br/>
todo: Ajustar css to chat <br/>
todo: Carregar imagem do fundo no projeto em si <br/>
todo: Colocar o chat fixo na esquerda <br/>
todo: corrigir bug das pontuações: 
Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: ponto in tabuleiro.pontuacoes, Duplicate key: object:13343, Duplicate value: {"dupla":true,"valor":200,"text":"Dupla","color":"blue","id":4402,"$$hashKey":"object:13343"}<br/>
todo: Colocar animação de "Próximo turno de..."<br />
todo: Colocar carta ladrão de volta <br/>
todo: Colocar carta do coringda de volta <br/>
todo: Colocar som de turno passou <br />
todo: Logar vencedor da partida <br />
todo: Apresentar ultima carta jogada <br/>
todo: Colocar animação de quando é "seu turno"<br/>
todo: Bug de quando os jogadores empatam ele deixa um como vitorioso <br/>
todo: Adicionar cartas bandido de volta


<div ng-controller="controller">
    <div style="float:left" >
            <div ng-repeat="carta in cartas track by $index" ng-show="cartas_roubadas.length === 0"  ng-class="{ 'red' : isRed(carta)}" 
            class="carta" data-drag="isMyTurn()" ng-model="cartas" data-jqyoui-options="{revert: 'invalid'}" 
            jqyoui-draggable="{index: {{$index}},placeholder:true,animate:true}" ng-mouseenter="setCarta(carta)" >
                    <span class="valor" >{{carta.valor}}</span>
                    <span class="naipe">{{carta.naipe.simbolo}}</span>
            </div>
            <div ng-repeat="carta in cartas_roubadas track by $index" ng-show="cartas_roubadas.length > 0" ng-class="{ 'red' : isRed(carta)}" 
              class="carta" data-drag="{{carta.drag}}" ng-model="cartas_roubadas" data-jqyoui-options="{revert: 'invalid'}" 
              jqyoui-draggable="{index: {{$index}},placeholder:true,animate:true}">
                    <span class="valor" >{{carta.valor}}</span>
                    <span class="naipe">{{carta.naipe.simbolo}}</span>
            </div>
    </div>
    <div style="float:left; padding: 35px">
        <div  class="painel-jogador">
            <!-- <div>
                <div>
                    <p>Valor: {{tabuleiroPartida.pick}}</p>
                    <rzslider rz-slider-model="tabuleiroPartida.pick.valor" rz-slider-options="valoresSliderOptions.optionsValor">
                </div>
                <div>
                    <p>Naipe</p>
                    <rzslider rz-slider-model="tabuleiroPartida.pick.naipe" rz-slider-options="valoresSliderOptions.optionsNaipe">
                </div>
                <button ng-click="setCoringa()">Ok</button>
            </div> -->
            <div>
                <div class="row">
                  <img ng-show="dadosPartida.vitorioso === jogadorId" src="http://rs36.pbsrc.com/albums/e1/stultus-tigris/tumblr_m6ync6F5YS1roozkr_zpsgdutaj5f.gif~c200" class="icon-coroa">
                </div>
                <div class="row">
                  <h2 class="label label-danger" ng-show="dadosPartida.activePlayer === jogadorId">Turno</h2>
                  <h3>{{tabuleiroPartida.totalPontos}}</h3>
                  <span ng-repeat="ponto in tabuleiroPartida.pontuacoes track by ponto.id">
                    <label style="background-color: {{ponto.color}}" ng-mouseenter="showCombo(ponto)" ng-mouseleave="showCombo()" class="label label-default">{{ponto.text}}</label>
                  </span>
                  <br/>
                  <label>{{tabuleiroPartida.jogador.name}}</label>
                </div>
            </div>
            <table class="table_game">
                  <thead>
                      <th ng-repeat="coluna in tabuleiroPartida.colunas">
                          {{$index}}
                      </th>
                  </thead>
                  <tbody>
                      <tr ng-repeat="coluna in tabuleiroPartida.colunas"  >
                          <td class="tile" ng-repeat="linha in coluna.linhas" jqyoui-droppable="{onDrop: 'cardPlaced(e)'}" 
                          data-drop="isHoldingThief || linha.data.length === 0" ng-model='linha.data' 
                          ng-class="{'tile_full' : linha.data.length > 0, 'combo-showing' : isComboShowing(linha)}" 
                          data-number="{{linha.number}}" data-player_id={{tabuleiroPartida.jogador.id}} >
                              <div ng-repeat="carta in linha.data"   ng-class="{ 'red' : isRed(carta)}" class="carta" >                                            
                                  <span class="valor" >{{carta.valor}}</span>
                                  <span class="naipe">{{carta.naipe.simbolo}}</span>
                              </div>
                          </td>
                      </tr>
                  </tbody>
              </table>
        </div>
    </div>
    <div style="float:right; padding: 35px">
        <div  class="painel-jogador" ng-repeat="tabuleiro in tabuleiros track by $index" ng-show="tabuleiro.visible">
            <!-- <div>
                <div>
                    <p>Valor: {{tabuleiro.pick}}</p>
                    <rzslider rz-slider-model="tabuleiro.pick.valor" rz-slider-options="valoresSliderOptions.optionsValor">
                </div>
                <div>
                    <p>Naipe</p>
                    <rzslider rz-slider-model="tabuleiro.pick.naipe" rz-slider-options="valoresSliderOptions.optionsNaipe">
                </div>
                <button ng-click="setCoringa()">Ok</button>
            </div> -->
            <div>
                <div class="row">
                  <img ng-show="dadosPartida.vitorioso === tabuleiro.jogador.id" src="http://rs36.pbsrc.com/albums/e1/stultus-tigris/tumblr_m6ync6F5YS1roozkr_zpsgdutaj5f.gif~c200" class="icon-coroa">
                </div>
                <div class="row">
                  <h2 class="label label-danger" ng-show="dadosPartida.activePlayer === tabuleiro.jogador.id">Turno</h2>
                  <h3>{{tabuleiro.totalPontos}}</h3>
                  <span ng-repeat="ponto in tabuleiro.pontuacoes  track by ponto.id">
                    <label style="background-color: {{ponto.color}}" ng-mouseenter="showCombo(ponto)" ng-mouseleave="showCombo()" class="label label-default">{{ponto.text}}</label>
                  </span>
                  <br/>
                  <label>{{tabuleiro.jogador.name}}</label>  
                </div>
            </div>
            <table  class="table_game">
            
                    <thead>
                        <th ng-repeat="coluna in tabuleiro.colunas">
                            {{$index}}
                        </th>
                    </thead>
                    <tbody>
                        <tr ng-repeat="coluna in tabuleiro.colunas"  >
                            <td class="tile" ng-repeat="linha in coluna.linhas" jqyoui-droppable="{onDrop: 'cardPlaced(e)'}" 
                            data-drop="isHoldingThief || linha.data.length === 0" ng-model='linha.data' 
                            ng-class="{'tile_full' : linha.data.length > 0, 'combo-showing' : isComboShowing(linha)}"
                           data-number="{{linha.number}}" data-player_id={{tabuleiro.jogador.id}} >
                                <div ng-repeat="carta in linha.data"   ng-class="{ 'red' : isRed(carta)}" class="carta" >                                            
                                    <span class="valor" >{{carta.valor}}</span>
                                    <span class="naipe">{{carta.naipe.simbolo}}</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>
    {{lista}}
</div>
@Html.Partial("../Shared/_Chat.cshtml", @Model.chatRoom)
<script>
    kronenApp.controller('controller',function($scope, $http){
  
  var naipes = [{simbolo: '♣',texto: 'paus'},
  {simbolo: '♦',texto: 'ouro'},
  {simbolo: '♥',texto: 'coracao' },
  {simbolo: '♠',texto: 'espadilha'}];
  var valores = [ '2','3','4','5','6','7','8','9','10','J', 'Q','K','A'];

  $scope.valoresSliderOptions = {
    optionsValor: {
      stepsArray: valores
    },
    optionsNaipe: {
      stepsArray: naipes.map((x) =>{
        return x.simbolo
      })
    }
  };
  $scope.cartas = [];
  indexCartas = 0;
  $scope.lista = [];
  $scope.cartas_roubadas = [];
  $scope.dadosPartida = {};
  $scope.jogadorId = "@Model.JogadorId";
  $scope.gameId = @Model.GameId;
  var indice = 0;
  var Trinca = function(){
    return {
      trinca: true,
      valor: 750,
      text: 'Trinca',
      color: 'green',
      id: getNextInt()
    };
  }
  var Dupla = function(){
      return {
        dupla: true,
        valor: 200,
        text: 'Dupla',
        color: 'blue',
        id: getNextInt()
      };
    }

  var Flush = function(){
    return {
      flush: true,
      valor: 350,
      text: 'Flush',
      color: 'orange',
      id: getNextInt()
    }
  }
  var Royal = function(){
    return {
      royal_straight_flush: true,
      valor: 1150,
      text: "Royal Straight",
      color: "black",
      id: getNextInt()
    };
  }
  var Straight = function(){
    return {
      straight: true,
      valor: 450,
      text: "Straight",
      color: "red",
      id: getNextInt()
    };
  }
  

  loadGame();

  setInterval(function(){
    if(!$scope.isMyTurn()){
      loadGame();
    }
  }, 10000);
  
  $scope.setCarta = function(carta){
    if(carta.especial){
      if(carta.valor === 'thief'){
        $scope.isHoldingThief = true;
      }
      else if(carta.valor === 'joker'){
        $scope.isHoldingJoker = true;
      }
    }else{
      $scope.isHoldingThief = false;
      $scope.isHoldingJoker = false;
    }
    console.log(carta);
  }

  function captureErrors(ret){
    console.log(ret);
  }

  $scope.isMyTurn = function(){
    return $scope.dadosPartida != null && $scope.dadosPartida.activePlayer === $scope.jogadorId;
  }

  function gerarPainelJogador(dadosPartida){
    $scope.tabuleiros = dadosPartida.tabuleiros.map((x) =>{
      x.getNaipe = getNaipe;
      x.getCarta = getCarta;
      x.pontuacoes = [];
      x.colunas = x.colunas.map((col) =>{
        col.linhas = col.linhas.map((lin) => {
          lin.data = lin.data.map((card) => {
            card.isNextOrPrevious = isNextOrPrevious;
            return card;
          });
          return lin;
        });
        return col;
      });
      if(x.jogador.id === $scope.jogadorId){
        $scope.tabuleiroPartida = x;
        x.visible = false;
      }else{
        x.visible = true;
      }
      return x;
    });
    calculateResults();
  }

  function loadGame(){
        $http.post('/api/game', {
            PlayerId : $scope.jogadorId,
            GameId : $scope.gameId
        }).then(function(ret){
            if(ret != null && ret.data.errors == null || ret.data.errors.length == 0){
                $scope.dadosPartida = ret.data.dadosPartida;
                $scope.cartas = $scope.dadosPartida.cartasVisiveis.map((x) =>{
                    x.isNextOrPrevious = isNextOrPrevious;
                    x.drag = true;
                    return x;
                });
                gerarPainelJogador($scope.dadosPartida);
            }else{
                catpureErrors(ret);
            }
        }).catch(function(ret){
            captureErrors(ret);    
        });
  }
    function generateNumeric(v){
      if(v === 'J'){
        return 11;
      }
      else if(v === 'Q'){
        return 12;
      }
      else if(v === 'K'){
        return 13;
      }
      else if(v === 'A'){
        return 14;
      }else{
        return Number(v);
      }

    }

    $scope.isRed = function(carta){
      if(carta == null || carta.naipe == null){
        return false;
      }
      if(carta.naipe.simbolo != null){
        if(carta.naipe.simbolo.includes(['♦']) || carta.naipe.simbolo.includes(['♥']))
          return true;
      }
      else if(carta.naipe.includes(['♦']) || carta.naipe.includes(['♥']))
        return true;
      else
        return false;
    }
    $scope.cardPlaced = function(e){
      console.log(e);
      if($scope.isHoldingThief){
        var posicao_roubada = Number(e.target.dataset.number == null ? 0 : e.target.dataset.number); //posição roubada
        var vitima_id = Number(e.target.dataset.player_id  == null ? 0 : e.target.dataset.player_id); //posição roubada
        var jogador = $scope.tabuleiros.find((x) => {
          if(x.jogador.id === vitima_id){
            return x;
          }
        });
        jogador.colunas.forEach((col) => {
          col.linhas.forEach((lin) => {
            if(lin.number === posicao_roubada){
              $scope.cartas_roubadas = [];
              $scope.cartas_roubadas.push(lin.data[0]);
              lin.data.splice(0,2);
              $scope.isHoldingThief = false;
              $scope.isPlacingThief = true;
            }
          })
        });

      }else if($scope.isPlacingThief){
        $scope.cartas_roubadas = [];
        $scope.isPlacingThief = false;
      }else if($scope.isHoldingJoker){
        var poslicao_coringa = Number(e.target.dataset.number == null ? 0 : e.target.dataset.number); //posição roubada
        var jogador_id = e.target.dataset.player_id  == null ? 0 : e.target.dataset.player_id; //posição roubada
        var jogador = $scope.tabuleiros.find((x) => {
          if(x.jogador.id === jogador_id){
            return x;
          }
        });

      jogador.colunas.forEach((col) => {
          col.linhas.forEach((lin) => {
              if(lin.number === poslicao_coringa){
                      $scope.coringaSet = lin.data[0];
                      $scope.isHoldingJoker = false;
                  }
              });
        });
        console.log(jogador);
      }else{
          var jogadorId = e.target.dataset.player_id  == null ? 0 : e.target.dataset.player_id; //posição roubada
          var jogador = $scope.tabuleiros.find((x) => {
              if(x.jogador.id === jogadorId){
              return x;
              }
          });
          if(jogador != null){
              updateServer(jogador);
          }
      }
      calculateResults()
      return null;
    }
    $scope.showCombo = function(ponto){
      if(ponto != null){
        console.log(ponto);
        $scope.pontoShowing = ponto.id;
      }else{
        $scope.pontoShowing = null;
      }
    }
    $scope.isComboShowing = function(linha){
      if($scope.pontoShowing != null){
        for(var x=0;x<linha.data.length;x++){
          var carta = linha.data[x];
          console.log(carta);
          if(carta.idsCombos != null && carta.idsCombos.length > 0){
            if(carta.idsCombos.find((x) => {
              if(x === $scope.pontoShowing){
                return x;
              }
            })){
              return true;
            }
          }
        }
      }
    }

    $scope.setCoringa = function(){
        $scope.coringaSet.valor = jogador.pick.valor;
        $scope.coringaSet.valorNumerico = generateNumeric(jogador.pick.valor);
        $scope.coringaSet.naipe = convertNaipeToObject(jogador.pick.naipe);
        $scope.cardPlaced();
    }
    function calculateResults(){  
      var maxPontuacao = 0;
      $scope.tabuleiros.forEach(t => {
        t.pontuacoes = [];
        t.totalPontos = 0;
        validaNaipes(t);
        validaTrincaDupla(t);
        validaSequencias(t);
        t.pontuacoes.forEach(p => {
          t.totalPontos += p.valor
        });
        if(t.totalPontos > 0 && t.totalPontos > maxPontuacao){
          $scope.dadosPartida.vitorioso = t.jogador.id;
          maxPontuacao = t.totalPontos;
        }
      });
    }
    function updateServer(dto){
        $http.post('/api/game/send',{
            jogadorId  : dto.jogador.id,
            gameId : $scope.gameId,
            colunas : dto.colunas
        }).then(function(ret){
            if(ret.data.success){
                console.log("jogada enviada com sucesso");
                loadGame();
            }
            else{
                captureErrors(ret);                
            }
        }).catch(function(ret){
            captureErrors(ret);
        });
    }
    function catpureErrors(ret){
        console.log(ret);
        if(ret.data.errors != null && ret.data.errors){
            ret.data.errors.map((x) => {
                alert(x.message);
            })
        }
    }
    function isEmpty(obj) {
      for(var key in obj) {
          if(obj.hasOwnProperty(key))
              return false;
      }
      return true;
    }
    function getNaipe(x, y){
      if(this.colunas[y] != null && this.colunas[y].linhas[x] != null && this.colunas[y].linhas[x].data != null && this.colunas[y].linhas[x].data.length > 0){
        var naipe = this.colunas[y].linhas[x].data[0].naipe;
        if(naipe != null)
        {
          if(naipe.simbolo != null){
            return this.colunas[y].linhas[x].data[0].naipe.texto;
          }
        }
        return null;
      }
    }
    function getCarta(x, y){
      if(this.colunas[y] != null && this.colunas[y].linhas[x] != null && this.colunas[y].linhas[x].data != null && this.colunas[y].linhas[x].data.length > 0){
        return this.colunas[y].linhas[x].data[0];
      }
      return {
        valor: null
      };
    }
    function validaNaipes(jogador){
      for(var x = 0; x < 3; x++){
        let flush = new Flush();
        if(jogador.getNaipe(x,0) != null && jogador.getNaipe(x,0) === jogador.getNaipe(x, 1) && jogador.getNaipe(x, 1) === jogador.getNaipe(x, 2)){
          saveCombinationsCombos([jogador.getCarta(x, 0), jogador.getCarta(x, 1), jogador.getCarta(x, 2)], flush.id);
          jogador.pontuacoes.push(flush);
        }
        if(jogador.getNaipe(0,x) != null && jogador.getNaipe(0,x) === jogador.getNaipe(1, x) && jogador.getNaipe(1, x)=== jogador.getNaipe(2, x)){
          saveCombinationsCombos([jogador.getCarta(0, x), jogador.getCarta(1, x), jogador.getCarta(2, x)], flush.id);
          jogador.pontuacoes.push(flush);
        }
      }
      if(jogador.getNaipe(0,0) != null && jogador.getNaipe(0,0) === jogador.getNaipe(1, 1) && jogador.getNaipe(1, 1)=== jogador.getNaipe(2, 2)){
          saveCombinationsCombos([jogador.getCarta(0, 0), jogador.getCarta(1, 1), jogador.getCarta(2, 2)], flush.id);
          jogador.pontuacoes.push(flush);
        }
      if(jogador.getNaipe(0,2) != null && jogador.getNaipe(0,2) === jogador.getNaipe(1, 1) && jogador.getNaipe(1, 1)=== jogador.getNaipe(2, 0)){
        saveCombinationsCombos([jogador.getCarta(0, 2), jogador.getCarta(1, 1), jogador.getCarta(2, 0)], flush.id);
        jogador.pontuacoes.push(flush);
      }
    }
    function validaTrincaDupla(jogador){
      for(var x = 0; x < 3; x++){
        var trinca = new Trinca();
        var dupla = new Dupla();
        var carta_a = jogador.getCarta(x, 0);
        var carta_b = jogador.getCarta(x, 1);
        var carta_c = jogador.getCarta(x, 2);
        // Vertical
        var cartasValidas = isCard(carta_a) && isCard(carta_b) && isCard(carta_c);
        if(cartasValidas && carta_a.valor == carta_b.valor && carta_b.valor === carta_c.valor){
          saveCombinationsCombos([carta_a, carta_b, carta_c], trinca.id);
          jogador.pontuacoes.push(trinca);
        }else if(isTwoCardsEqual(carta_a,carta_b,carta_c, dupla.id)){
          jogador.pontuacoes.push(dupla);
        }
        
        carta_a = jogador.getCarta(0, x);
        carta_b = jogador.getCarta(1, x);
        carta_c = jogador.getCarta(2, x);
        var cartasValidas = isCard(carta_a) && isCard(carta_b) && isCard(carta_c);
        // Horizontal
        if(cartasValidas && carta_a.valor == carta_b.valor && carta_b.valor === carta_c.valor){
          saveCombinationsCombos([carta_a, carta_b, carta_c], trinca.id);
          jogador.pontuacoes.push(trinca);
        }else if(isTwoCardsEqual(carta_a,carta_b,carta_c, dupla.id)){
          jogador.pontuacoes.push(dupla);
        }
      }
      //Diagonal A
      cartasValidas = isCard(jogador.getCarta(0,0)) && isCard(jogador.getCarta(1,1)) && isCard(jogador.getCarta(2,2));
      var carta_a = jogador.getCarta(0, 0);
      var carta_b = jogador.getCarta(1, 1);
      var carta_c = jogador.getCarta(2, 2);
      if(cartasValidas && carta_a.valor === carta_b.valor && carta_b.valor === carta_c.valor){
          saveCombinationsCombos([carta_a, carta_b, carta_c], trinca.id);
          jogador.pontuacoes.push(trinca);
      }else if(isTwoCardsEqual(carta_a,carta_b,carta_c, dupla.id)){
          jogador.pontuacoes.push(dupla);
      }
      //Diagonal B
      cartasValidas = isCard(jogador.getCarta(0,2)) && isCard(jogador.getCarta(1,1)) && isCard(jogador.getCarta(2,0));
      carta_a = jogador.getCarta(0, 2);
      carta_b = jogador.getCarta(1, 1);
      carta_c = jogador.getCarta(2, 0);
      if(cartasValidas && carta_a.valor === carta_b.valor && carta_b.valor === carta_c.valor){
          saveCombinationsCombos([carta_a, carta_b, carta_c], trinca.id);
          jogador.pontuacoes.push(trinca);
        }else if(isTwoCardsEqual(carta_a,carta_b,carta_c, dupla.id)){
          jogador.pontuacoes.push(dupla);
        }
    }
    function validaSequencias(jogador){
      for(var x = 0; x < 3; x++){
        var royal = new Royal();
        var straight = new Straight();
        var carta_a = jogador.getCarta(x, 0);
        var carta_b = jogador.getCarta(x, 1);
        var carta_c = jogador.getCarta(x, 2);
        // Vertical
        if(isCard(carta_a) && isCard(carta_b) && isCard(carta_c)){
          if(isSequence([carta_a, carta_b, carta_c])) {
            if(isRoyal([carta_a,carta_b,carta_c])){
              saveCombinationsCombos([carta_a, carta_b, carta_c], royal.id);
              jogador.pontuacoes.push(royal);
            }else{
              saveCombinationsCombos([carta_a, carta_b, carta_c], straight.id);
              jogador.pontuacoes.push(straight);
            }
          }
        }
        carta_a = jogador.getCarta(0, x);
        carta_b = jogador.getCarta(1, x);
        carta_c = jogador.getCarta(2, x);
        // Horizontal
        if(isCard(carta_a) && isCard(carta_b) && isCard(carta_c)){
          if(isSequence([carta_a, carta_b, carta_c])){
            if(isRoyal([carta_a,carta_b,carta_c])){
              saveCombinationsCombos([carta_a, carta_b, carta_c], royal.id);
              jogador.pontuacoes.push(royal);
            }else{
              saveCombinationsCombos([carta_a, carta_b, carta_c], straight.id);
              jogador.pontuacoes.push(straight);
            }
          }
        }
      }
      //Diagonal A
      cartasValidas = isCard(jogador.getCarta(0,0)) && isCard(jogador.getCarta(1,1)) && isCard(jogador.getCarta(2,2));
      var carta_a = jogador.getCarta(0, 0);
      var carta_b = jogador.getCarta(1, 1);
      var carta_c = jogador.getCarta(2, 2);
      if(cartasValidas && isSequence([carta_a, carta_b, carta_c])){
        if(isRoyal([carta_a,carta_b,carta_c])){
          saveCombinationsCombos([carta_a, carta_b, carta_c], royal.id);
          jogador.pontuacoes.push(royal);
        }else{
          saveCombinationsCombos([carta_a, carta_b, carta_c], straight.id);
          jogador.pontuacoes.push(straight);
        }
      }
      //Diagonal B
      cartasValidas = isCard(jogador.getCarta(0,2)) && isCard(jogador.getCarta(1,1)) && isCard(jogador.getCarta(2,0));
      carta_a = jogador.getCarta(0, 2);
      carta_b = jogador.getCarta(1, 1);
      carta_c = jogador.getCarta(2, 0);
      if(cartasValidas && isSequence([carta_a, carta_b, carta_c])){
          if(isRoyal([carta_a,carta_b,carta_c])){
            saveCombinationsCombos([carta_a, carta_b, carta_c], royal.id);
            jogador.pontuacoes.push(royal);
          }else{
            saveCombinationsCombos([carta_a, carta_b, carta_c], straight.id);
            jogador.pontuacoes.push(straight);
          }
        }
    }
    function convertNaipeToObject(naipe){
      return naipes.filter((x) => {
        if(x.simbolo === naipe){
          return x;
        }
      })[0];
    }
    function isRoyal(cartas){
      var isKing = false;
      var isQueen = false;
      var isAce = false;
      var isSameNaipe = true;
      for(var x = 0; x < cartas.length; x++){
        var c = cartas[x];
        if(x > 0){
          if(c.naipe.texto !== cartas[x-1].naipe.texto)
            isSameNaipe = false;
        }
        if(c.valor === "K"){
          isKing = true;
        }
        else if(c.valor === "Q"){
          isQueen = true;
        }else if(c.valor === "A"){
          isAce = true;
        }
      }
      if(isKing && isQueen && isAce && isSameNaipe){
        return true;
      }
    }
    function isSequence(cartas){
      
      for(var x = 0; x < cartas.length; x++){
        var c = cartas[x];
        if(!!c){
          for(var y = 0; y < cartas.length; y++){
            if(y != x){
              var c2 = cartas[y];
              if(c.isNextOrPrevious(c2)){
                for(var z = 0; z < cartas.length; z++){
                  if(z != x && z != y){
                    c3 = cartas[z];
                    if(c2.isNextOrPrevious(c3) && c2.isNextOrPrevious(c) && c3.valor != c.valor){
                      return true;
                    }else if(c.isNextOrPrevious(c3) && c.isNextOrPrevious(c2) && c3.valor != c2.valor){
                      return true;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function isTwoCardsEqual(carta_a,carta_b,carta_c, idCombo){
      if(!!carta_a.valor && carta_a.valor === carta_b.valor){
        saveCombinationCombo(carta_a, idCombo);
        saveCombinationCombo(carta_b, idCombo);
        return true;
      }else if(!!carta_b.valor && carta_b.valor === carta_c.valor){
        saveCombinationCombo(carta_b, idCombo);
        saveCombinationCombo(carta_c, idCombo);
        return true;
      }else if(!!carta_c.valor && carta_a.valor === carta_c.valor){
        saveCombinationCombo(carta_a, idCombo);
        saveCombinationCombo(carta_c, idCombo);
        return true;
      }
      else{
        return false;
      }
      
    }
    function isNextOrPrevious(carta){
      return this.valorNumerico + 1 == carta.valorNumerico || this.valorNumerico - 1 == carta.valorNumerico;
    }
    function isCard(carta){
      return carta != null && carta.valor != null;
    }
    function saveCombinationCombo(carta, id){
      if(id == null){
        return;
      }
      if(carta.idsCombos == null){
        carta.idsCombos = [];
      }
      carta.idsCombos.push(id);
    }
    function saveCombinationsCombos(cartas, id){
      if(cartas != null && cartas.length > 0){
        for(var x=0;x<cartas.length;x++){
          saveCombinationCombo(cartas[x], id); 
        }
      }
    }
    function getNextInt(){
      indice += 1;
      return indice;
    }
})
</script>